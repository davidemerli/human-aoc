import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";

import { useEffect, useMemo, useState } from "react";
import { trpc } from "../utils/trpc";
import classnames from "classnames";

const Home: NextPage<{ day: number; year: number }> = ({ day, year }) => {
  const { data: session, status } = useSession();

  if (status === 'loading') {
    return <div>Loading...</div>
  }

  if (status === 'unauthenticated') {
    return <div>Please, authenticate</div>
  }

  const [aocCookie, setAocCookie] = useState(() => {
    if (typeof window === "undefined") return "";

    const data = localStorage.getItem("aocCookie");

    if (data) {
      return JSON.parse(data);
    }

    return "";
  });


  const { data: hello, isLoading, isError } = trpc.example.getAoc.useQuery(aocCookie);
  const { data: aocText, isLoading: isLoadingAocText, isError: isErrorAocText } = trpc.example.getAocText.useQuery({
    day,
    year,
    cookie: aocCookie,
  });

  if (isError || isErrorAocText) {
    return <div>Something went wrong. Try again!</div>
  }

  if (isLoading || isLoadingAocText) {
    return <div>Loading...</div>
  }

  // Fron now we should have hello fully Loaded, and hopefully with Type Inference!

  // Not sure what is happening here... were does aocCookie come from?
  useEffect(() => {
    if (typeof window === "undefined") return;

    localStorage.setItem("aocCookie", JSON.stringify(aocCookie));
  }, [aocCookie]);

  const [fontSize, setFontSize] = useState(16);

  const puzzleAnswers = useMemo(() => {
    if (!aocText) return [];

    const regex = /<p>Your puzzle answer was <code>(\d+)<\/code>/g;

    const matches = [...aocText.matchAll(regex)];

    return matches.map((match) => match[1]);
  }, [aocText]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen">
        <div className="flex h-full w-full flex-row gap-8 overflow-scroll p-4">
          <div className="flex h-full w-full flex-col gap-4 overflow-scroll">
            <div className="mt-2 flex w-full flex-row gap-2">
              <AnswerInput part={1} puzzleAnswer={puzzleAnswers[0]}/>
              <AnswerInput part={2} puzzleAnswer={puzzleAnswers[1]}/>
            </div>
            <AoC
              className="scroll h-full max-w-3xl overflow-scroll text-left text-xl"
              dangerouslySetInnerHTML={{ __html: aocText.data as string }}
            />
          </div>
          <div className="flex h-full w-full flex-col gap-4 overflow-scroll">
            <input
              className="input input-disabled"
              value={aocCookie}
              onChange={(e) => setAocCookie(e.target.value)}
            />
            <div className="absolute top-20 right-8 z-10 flex items-center">
              <button
                className="btn-ghost btn"
                onClick={() => setFontSize(fontSize + 1)}
              >
                +
              </button>
              <button
                className="btn-ghost btn"
                onClick={() => setFontSize(fontSize - 1)}
              >
                -
              </button>
              <button
                className="btn-ghost btn"
                onClick={() => {
                  const el = document.createElement("textarea");
                  el.value = hello as string;
                  document.body.appendChild(el);
                  el.select();
                  document.execCommand("copy");
                  document.body.removeChild(el);
                }}
              >
                Copy
              </button>
            </div>
            <pre
              className="relative h-full w-full overflow-scroll rounded-xl bg-base-300 p-4"
              style={{
                fontSize: `${fontSize}px`,
              }}
            >
              {hello}
            </pre>
          </div>
        </div>
      </main>
    </>
  );
};

const AnswerInput = ({ part, puzzleAnswer }: {part: number, puzzleAnswer: string}) => (
  <input
    className={classnames(
      "monospace input input-primary flex-grow text-xl font-medium",
      {
        "input-disabled disabled pointer-events-none border-yellow-200":
          puzzleAnswer,
      }
    )}
    placeholder={`Part ${part}`}
    value={puzzleAnswer || ""}
  />
);

const getServerSideProps = async () => {
  // get day and year from url http://localhost:3000/2020/1
  const [year, day] = window.location.pathname.split("/").slice(1);

  return {
    props: {
      day: parseInt(day || "1"),
      year: parseInt(year || "2020"),
    },
  };
};

import styled from "styled-components";

const AoC = styled.div`
  font-family: "Roboto Mono", monospace;

  h2 {
    color: #ffffff;
    margin-top: 1em;
    margin-bottom: 1em;
    white-space: nowrap;
  }

  em {
    color: #ffffff;
    font-style: normal;
    text-shadow: 0 0 2px #ffffff;
  }

  first-of-type {
    margin-top: 0;
  }

  a {
    white-space: nowrap;
  }

  em.star {
    color: #ffff66;
    font-style: normal;
    text-shadow: 0 0 4px #ffff66;
  }

  pre,
  code {
    font-family: "Fira Code", monospace;
    background: #1e1e1e;
    color: #d4d4d4;
    border-radius: 0.5rem;
    margin: 0.5rem 0;
  }

  pre {
    padding: 1rem;
  }

  code {
    padding: 0.2rem 0.2rem;
  }

  p {
    margin: 1rem 0;
  }

  .share {
    color: #009900;
    cursor: default;
    transition: color 0.2s 1s;
    /*position: relative;*/
  }

  .share:hover,
  .share:focus-within {
    color: #aaffaa;
    transition: color 0.2s 0s;
  }

  .share .share-content {
    display: inline-block;
    vertical-align: text-bottom;
    white-space: nowrap;
    overflow: hidden;
    max-width: 0;
    transition: max-width 0.2s 1s;
  }

  .share .share-content:before {
    content: "\\00a0";
  }

  .share:hover .share-content,
  .share:focus-within .share-content {
    max-width: 45em;
    transition: max-width 0.2s 0s;
  }

  .day-success {
    color: #ffff66;
    text-shadow: 0 0 6px #ffff66;
  }
`;

export default Home;
